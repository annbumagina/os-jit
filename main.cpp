#include <bits/stdc++.h>
#include <sys/mman.h>

using namespace std;

// For "Hello, "
unsigned char begin_[] = {
    0x55,
    0x48, 0x89, 0xe5,
    0x48, 0x89, 0x7d, 0xf8,
    0x48, 0x8b, 0x45, 0xf8,
    0xc6, 0x00, 0x48,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x01,
    0xc6, 0x00, 0x65,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x02,
    0xc6, 0x00, 0x6c,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x03,
    0xc6, 0x00, 0x6c,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x04,
    0xc6, 0x00, 0x6f,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x05,
    0xc6, 0x00, 0x2c,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x06,
    0xc6, 0x00, 0x20
};

// For "<name>" (or "world" by default)
unsigned char name_[330] = {
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x07,
    0xc6, 0x00, 0x77,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x08,
    0xc6, 0x00, 0x6f,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x09,
    0xc6, 0x00, 0x72,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x0a,
    0xc6, 0x00, 0x6c,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x0b,
    0xc6, 0x00, 0x64,
};

// For "!\n"
unsigned char end_[] = {
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x0c,
    0xc6, 0x00, 0x21,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x0d,
    0xc6, 0x00, 0x0a,
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0, 0x0e,
    0xc6, 0x00, 0x00,
    0x48, 0x8b, 0x45, 0xf8,
    0x5d,
    0xc3
};

unsigned char index_prefix[] = {
    0x48, 0x8b, 0x45, 0xf8,
    0x48, 0x83, 0xc0
};

int main(int argc, char *argv[])
{
    int name_len = 55;
    if (argc > 1) {
        string name = argv[1];
        for (int i = 2; i < argc; i++) {
            name = name + " " + argv[i];
        }
        if (name.size() > 30) {
            cout << "Too big name - " << name << '\n';
            return 0;
        }
        for (int i = 0; i < name.size(); i++) {
            for (int j = 0; j < 7; j++) {
                name_[i * 11 + j] = index_prefix[j];
            }
            name_[i * 11 + 7] = i + 7;
            name_[i * 11 + 8] = 0xc6;
            name_[i * 11 + 9] = 0x00;
            name_[i * 11 + 10] = name[i];
        }
        end_[7] = name.size() + 7;
        end_[18] = name.size() + 8;
        end_[29] = name.size() + 9;
        name_len = name.size() * 11;
    }

    int len = sizeof(begin_) + sizeof(end_) + name_len;
    void *ptr = mmap(NULL, len, PROT_NONE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    if (ptr == MAP_FAILED) {
        cout << "Mapping failed: " << strerror(errno) << '\n';
        return 0;
    }
    if (mprotect(ptr, len, PROT_WRITE | PROT_EXEC) < 0) {
        cout << "Cannot change access protections : " << strerror(errno) << '\n';
    } else {
        memcpy(ptr, begin_, sizeof(begin_));
        memcpy((char *) ptr + sizeof(begin_), name_, name_len);
        memcpy((char *) ptr + sizeof(begin_) + name_len, end_, sizeof(end_));
        char message[100];
        cout << ((char *(*)(char *))ptr)(message);
    }
    if (munmap(ptr, len) < 0) {
        cout << "Unmapping failed: " << strerror(errno) << '\n';
    }
    return 0;
}
